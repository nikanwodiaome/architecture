=============异地多活的四大技巧============


    跨城异地多活是多活架构设计中复杂度最高的一种。


技巧1；保证核心业务的异地多活

        保证所有业务都能 异地多活 是个误区，因为某些业务规则本质上就不允许设计多活架构：注册问题、用户信息修改问题、生成全局唯一递增ID问题。
        所以设计时，应该 优先实现核心业务的异地多活架构！

技巧2：保证核心数据最终一致性

        异地多活本质上是通过异地的数据冗余，来保证在极端异常情况下业务也能够正常提供给用户，因此数据同步是异地多活架构设计的核心。
        要求所有数据都实时同步，是完美主义误区。
            业务上要求数据快速同步，物理上正好做不到数据快速同步。只能尽量减少影响，采取的方法：
                尽量减少异地多活机房的距离，搭建高速网络。
                尽量减少数据同步，只同步核心业务相关的数据。
                保证最终一致性，不保证实时一致性。

技巧3：采用多种手段同步数据
        数据同步是异地多活架构设计的核心，同步方式：
            存储系统本身的同步功能：如MySql的主备复制、Redis的Cluster功能、Elasticsearch的集群等
            消息队列方式
            二次读取方式
            存储系统同步方式
            回源读取方式
            重新生成数据方式等等

技巧4：只保证绝大部分用户的异地多活

    某些场景下我们无法保证100%的业务可用性，总是会有一定的损失。例如：密码不同步导致无法登陆、用户信息不同步导致用户看到
    旧的信息等。
    这是由物理定理决定的，无法避免。
    虽然我们无法做到100%可用性，但并不以为着我们什么都不能做，为了让用户心里更好受一些，我们可以采取一些措施进行安抚或者
    补偿，如：
        挂公告
            技术哥哥正在紧急处理，已将一名程序猿祭天等等
        事后对用户进行补偿
            送一些业务上可用的代金券、小礼包等，减少用户抱怨。
         补充体验
            短信、微信、邮箱提醒等等。

****************核心思想********************
    采用多种手段，保证绝大部分用户的核心业务异地多活。                                                          
