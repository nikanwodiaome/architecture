------------------高性能负载均衡：分类及架构----------------

起源：单服务器的性能存在天花板，业务需求时需要设计高性能集群来提升系统整体的处理性能。
    高性能集群：同样的输入数据和逻辑，无论在哪台服务器上执行，都应该得到相同的输出。
                复杂性主要体现在需要增加一个任务分配器，以及为任务选择一个合适的任务分配算法。
                按流行通用的叫法就是--负载均衡器。
                但这个名称有一定的误导性，负载均衡不只是为了计算单元的负载达到均衡状态。
========分类及架构=========
分类：
    DNS负载均衡
        DNS是最简单也是最常见的负载均衡方式，一般用来实现地理级别的负载均衡。
        优点：实现简单、成本低；就近访问，提升访问速度。
        缺点：粒度太粗、负载均衡算法少;更新不及时，扩展性差
    硬件负载均衡
        通过单独的硬件设备来实现负载均衡功能。典型：F5和A10
        优点：功能强大、性能强大、稳定性高、支持安全防护，百万级性能
        缺点：价格昂贵、扩展性差
    软件负载均衡
        通过负载均衡软件来实现负载均衡功能。常用Nginx和LVS
        Nginx是7层负载均衡，支持HTTP和E-mail协议，性能在万级 5万/秒,支持5万并发
        LVS是Linux内核的4层负载均衡，和协议无关，几乎所以应用都可以做 性能在十万级 80万/秒。
        优点：简单、便宜、灵活、可扩展
        缺点：性能一般、一般不具备安全防护功能
一般基于上述三类的优缺点进行组合使用：
    组合基本原则：
        DNS负载均衡用于实现地理级别的负载均衡
        硬件负载均衡用于实现集群级别的负载均衡
        软件负载均衡用于实现机器级别的负载均衡
=======其他知识======
1 TPS 和 QPS
    T-Transaction 代表写请求
    Q-Query 代表读请求

2 采用何种负载均衡策略，分析思路
    从DAU出发，结合业务的特点，计算出来总的QPS和TPS，再根据通常规律计算出QPS和TPS的峰值，加上一定
    的未来发展空间和高可用冗余，结合单机能够支撑的QPS和TPS量，就可以计算出来整个集群的规模，有了这些数据
    就可以制定出比较合理的负载均衡的策略。
