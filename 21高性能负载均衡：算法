=----------高性能负载均衡算法----------

1负载均衡算法数量较多，分类如下

    任务平分类：将收到的任务平均分配给服务器进行处理，这里的 平均 可以是绝对数量的平均，也可以是比例或者权重上的平均。
    负载均衡类：根据服务器的负载来进行分配，这里的 负载 不一定是通常意义上我们所说的CPU负载 也可以用连接数、I/O使用率、网卡吞吐量等来衡量
    性能最优类：根据服务器的响应时间来进行任务分配，优先将新任务分配给响应最快的服务器。
    Hash类：负载均衡系统根据任务中的某些关键信息进行Hash运算，将相同Hash值得请求分配到同一台机器。常见源地址Hash、目标地址Hash、session id Hash、用户ID Hash等

2负载均衡算法，及优缺点

    轮询
        负载均衡系统受到请求后，按照顺序轮流分配到服务器上。
        轮询是最简单的一个策略，无须关注服务器本身的状态。只要服务器在运行，运行状态是不关注的，如果服务器直接宕机，或者服务器与负载均衡系统断连，这时负载均衡系统
        是能够感知的，能做出相应的处理。
        简单是优点，也是缺点。
    加权轮询
        根据服务器权重进行任务分配。这个权重一般根据硬件配置进行静态配置，采用动态的方式计算会更加契合业务，但复杂度也会更高。
        是轮询的一种特殊形式，主要目的为了解决不同服务器处理能力有差异的问题。
    负载最低优先
        站在服务端的角度进行分配，将任务分配给当前负载最低的服务器。
        负载最低优先的算法解决了轮询算法中无法感知服务器状态的问题，由此带来的代价是复杂度要增加很多。
    性能最优优先
        站在客户端的角度进行分配，将任务优先分配给处理速度最快的服务器，快速响应
        复杂度很高。
    Hash类
        根据任务中的关键信息进行Hash运算，将相同Hash值得请求分配到同一台服务器上，为了满足特定的业务需求。
            源地址Hash
            适合于存在事务、会话的业务——例如网银登录
            ID Hash
            这里的ID一般指临时性数据的ID 如 session id ,网银登录，同样可以用session id Hash
3其他知识
        微信抢红包的高并发架构，应该采用的负载均衡算法？
    应该至少包含两个负载均衡，一个是应用服务的负载均衡，用于将任务请求分发到不同的服务器，这里采用轮询或者加速轮询的算法，因为这种速度快，适合抢红包的业务场景；
    另一起负载均衡是数据库服务器的负载均衡，这里更适合根据红包ID进行Hash负载均衡，将所有数据请求在同一台服务器上进行，防止多台服务器间的不同步问题。
                            

