====如何应对接口级故障====

1 异地多活主要应对系统级故障，影响大，发生概率小
  接口故障影响可能没有系统级故障大，但是发生的概率较高

2 接口级故障的典型表现：系统没宕机、网络没中断，但是业务出现问题：响应缓慢、访问超时、大量访问出现异常等。

3 导致接口级故障的原因：
    内部原因：
        程序bug死循环，某个接口导致数据库慢查询、程序逻辑不完善导致耗尽内存等
    外部原因：
        黑客攻击、促销或者抢购引入超出平时几倍甚至几十倍的用户、第三方系统大量请求、第三方系统响应缓慢等。
4 解决接口级故障的核心思想：
    优先保证核心业务
    优先保证绝大多部门用户

5 应对接口级故障的方式：
    
    降级
        系统将某些业务或者接口的功能降低，可以是只提供部门功能，也可以是完全停掉所有功能。
        降级的核心思想是丢车保帅，优先保证核心业务。
        常见实现降级的方式：
            系统后门降级（系统提供一个降级URL）
            独立降级系统
    熔断
        与降级内在含义不同，降低的目的是应对系统自身的故障，而熔断的目的是应对依赖的外部系统故障的情况。
        熔断机制实现的关键是需要有一个统一的API调用层，由API调用层来进行采样或统计，
        另一个关键是阈值的设计。 
    限流
        降级是从系统功能优先级的角度考虑如何应对故障，而限流则是从用户访问压力的角度来考虑如何应对故障。
        限流指只允许系统能够承受的访问量进来，超出系统访问能力的请求将被丢弃。
        限流一般都是系统内实现,常见限流方式有两类：
            基于请求限流：限制总量（某个指标累积上限 如用户数）、限制时间量（一段时间内某个指标的上限）
            基于资源限流：找到系统内部影响性能的关键资源，对其使用上限进行限制。常见的内部资源有：连接数、文件句柄、线程数、请求队列等
                          难度在于 如何确定关键资源、如何确定关键资源阈值
    排队
        排队实际上是限流的一个变种，限流是直接拒绝用户，排队是让用户等待一段时间。
        一般情况下，排队需要用独立的系统去实现。

6 设计一个整点限量秒杀系统，包括登录、抢购、支付（依赖支付宝）等功能，如何设计接口级故障应对手段？
    6-1 对于用户服务，在抢购期间可以准备降级策略，压力过大时保证用户登录的可用，注册和修改信息可以做降级处理。
    6-2 抢购页面最大程度静态化，一般用户开始前会尝试刷新页面，查询压力要比下单压力大很多。
        抢购下单涉及到订单、库存和商品查询。可通过请求队列来限流，排队+限流，
        超出排队人数直接返回排队人数过多，超出库存的请求直接返回。
    6-3 支付依赖第三方系统，合理设置熔断策略，如支付平均时长超过限制可提示用户稍晚做支付。





