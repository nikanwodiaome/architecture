================异地多活架构===========

高可用计算架构、高可用存储架构，本质的设计目的都是为了解决部分服务器故障的场景下，如何保证系统
能够继续提供服务。但在极端场景下，有可能所有服务器都出现故障。

即使有其他地区的备份，把备份业务系统全部恢复到能够正常提供业务，花费的时间也比较长、隐藏问题、
缓存数据等都可能导致影响。
如果业务期望达到即使在此类灾难性故障的情况下，业务也不受影响，或者在几分钟内就很快恢复，那么
就需要设计异地多活架构。

*****异地多活******

关键点：
    异地、多活
    地理位置上不同、不同地理位置上的系统都能够提供业务服务。
    需要满足两个标准：
        正常情况下，用户无论访问哪一个地点的业务系统，都能得到正确的业务服务。
        某个地方业务异常的时候，用户访问其他地方正常的业务系统，能够得到正确的业务服务。

    与 活 对应的字 是 备，备是备份，正常情况下对外是不提供服务的，如果需要提供服务，需要大量的人工干预和操作。

实现异地多活，代价很高：系统复杂度会发生质的变化，成本会上升。

适用场景：业务规模很大，能够做异地多活的情况下还是尽量做。常见的新闻网站、企业内部IT系统、游戏、博客等，如果
无法承受异地多活带来的复杂度和成本，是可以不做异地多活的，只需要做异地备份即可。

架构模式：
    1 同城异区
        业务部署在同一个城市不同区的多个机房，机房间用专用的高速网络连接在一起。
        结合复杂度、成本、故障发生概率来综合考虑，同城异区是应对机房级别故障的最优架构（机房火灾、机房停电、机房空调故障等）。
    2 跨城异地
        业务部署在不同城市的多个机房，距离要远。为了解决新奥尔良水灾、美加大停电这种问题。
        跨城异地，距离较远导致的架构复杂度大大上升。两个机房的网络传输速度会降低、中间传输各种不可控因素也非常多。
        数据不一致与正常提供业务，这是一个矛盾的地方。重点落在数据上——根据数据特性来做不同的架构。
        强一致性要求的数据——银行存款余额、支付宝余额等，这类数据无法作答跨城异地多活的。只能采用同城异区这种架构。
        而数据一致性要求不那么高、或者数据不怎么改变，即使丢数据影响也不大的业务，跨城异地多活就可以派上用场。
    3 跨国异地
        业务部署在不同国家的多个机房。
        这个跨国异地的 多活 和 跨城异地的多活 实际含义并不一致。
        一般应用场景
            为不同地区用户提供服务
            只读类业务做多活

