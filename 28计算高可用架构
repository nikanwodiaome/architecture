===================计算高可用架构====================

设计目标：
    当出现部分硬件损坏时，计算任务能够正常运行。
        本质是通过冗余来规避部分故障的风险，通过增加更过服务器来达到计算高可用。
关键点：
    1-哪些服务器可以执行任务  每个服务器都可以执行任务 或者 特定服务器执行任务（主机/ZK中的Leader）
    2-任务如何重新执行 已分配任务执行失败不做处理/已分配任务执行结果需要反馈，需要任务分配器（逻辑上或物理上都可）

常见的计算高可用架构：主备/主从/集群

    主备
        可细分为冷备/温备
        简单，主备间不需要进行交互，状态判断和切换操作由人工执行，易错不可用。
    主从
        从机也执行任务，发挥了从机的硬件性能，需要将任务分类，发生故障时也需要人工介入，任务分配器会复杂一些。 
    集群
        细分为 对称集群——集群中每个角色都一样，可执行所有任务
               非对称集群——集群中服务器分为多个角色，不同角色执行不同的任务，最常见 Master-Slave角色
        可包含2台服务器的集群。
        
        对称集群，也叫负载均衡集群，设计关键点：任务分配器需要选取分配策略/任务分配器需要检测服务器状态。
        非对称集群：设计关键点：集群通过某种方式来区分不同服务器的角色/指定类型的服务器故障时，需要重新分配角色。

        非对称集群比对称集群，设计更加复杂：任务分配策略更加复杂/角色分配策略实现比较复杂，可能需要ZAB/Raft这类复杂算法来实现选举。


**计算高可用架构与存储高可用架构复杂度对比**

想高可用，就离不开冗余，无论计算高可用还是存储高可用都会面对机器状态检测/切换及机器选择问题，在
这几个方面，二者差别不大。
但对于计算而言，集群中机器间基本上无交互，对于需要重试的计算任务，是有任务管理器来维护处理；
而存储高可用还会涉及机器之间的同步和一致性问题，在同步时还需要考虑性能/稳定性/同步中断/个别失败/重复同步等我呢提，这
一块会复杂很多。
总体来看，存储高可用更为复杂。


              
